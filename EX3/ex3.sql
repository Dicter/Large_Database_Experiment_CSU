--建立表格存储不同操作的时间戳
CREATE TABLE TIMERECORD(
    Event NVARCHAR2(128),
    HappenedTime VARCHAR2(64)
);
--DROP TABLE TIMERECORD ;

--建立过程，记录执行过程当下的时间，存入时间按戳表格
CREATE OR REPLACE PROCEDURE RECORDTIME(Events NVARCHAR2)
AS
TEMP VARCHAR2(64);
BEGIN
    SELECT TO_CHAR(SYSTIMESTAMP,'yyyy-mm-dd hh24:mi:ss.ff') INTO TEMP FROM DUAL;
    INSERT INTO TIMERECORD VALUES(Events,TEMP);
END;

EXEC RECORDTIME('第一次测试');

SELECT * FROM TIMERECORD;

--建立表格存储用户名下的数据文件的大小以及记录的时间
CREATE TABLE TableStatus(
    TABLENAME NVARCHAR2(50),
    FILESIZE NUMBER(20),
    CHECKTIME VARCHAR2(64)
);

--建立过程，获取一个时间戳并且记录该时间戳对应下的用户名下的数据表的大小
CREATE OR REPLACE PROCEDURE RecordFileSize (TName NVARCHAR2)
AS
TEMP1 NVARCHAR2(64);
TEMP2 NUMBER(16);
BEGIN
    SELECT BYTES/1024 INTO TEMP2 FROM user_segments WHERE segment_name=TName;
    SELECT TO_CHAR(SYSTIMESTAMP,'yyyy-mm-dd hh24:mi:ss.ff') INTO TEMP1 FROM DUAL;
    --SELECT TABLESPACE_NAME, FILE_NAME, BYTES/1024/1024||'M' INTO TEMP2, TEMP3, TEMP4 FROM DBA_DATA_FILES WHERE TABLESPACE_NAME='USERS';
    INSERT INTO TableStatus VALUES(TName,TEMP2 ,TEMP1);
END;

EXEC RecordFileSize('T_ATTEND_J521');
SELECT * FROM TableStatus;
--创建文件保存读取的文件中的名字
CREATE TABLE OriginalName(
    OName NVARCHAR2(32)
);

--使用SQL Developer可视化的从文件插入数据至OriginalName中

SELECT * FROM OriginalName;
SELECT COUNT(*) FROM ORIGINALNAME;

--创建表格保存从文件中读取的百家姓
CREATE TABLE OriginalX(
    OX NVARCHAR2(32)
);

--使用SQL Developer可视化的从文件插入数据至OriginalX中\

SELECT * FROM ORIGINALX;
SELECT COUNT(*) FROM ORIGINALX;

--创建表格存储将要生成的名字的第一位
CREATE TABLE Name1(
    OName1 NVARCHAR2(1)
);
INSERT into NAME1 values('吴');
EXEC RecordFileSize('NAME1');
SELECT * FROM TableStatus;
--创建表格存储将要生成的名字的第二位
CREATE TABLE Name2(
    OName2 NVARCHAR2(1)
);

--创建表格存储将要生成的名字的第三位
CREATE TABLE Name3(
    OName3 NVARCHAR2(1)
);

--从已经读取现有的数据中选取对应位置的字插入表格
INSERT INTO NAME1 (SELECT DISTINCT SUBSTR(OX,1,1) FROM ORIGINALX);
INSERT INTO NAME1 (SELECT DISTINCT SUBSTR(ONAME,1,1) FROM OriginalName);
INSERT INTO NAME2 (SELECT DISTINCT SUBSTR(ONAME,2,1) FROM OriginalName);
INSERT INTO NAME3 (SELECT DISTINCT SUBSTR(ONAME,3,1) FROM OriginalName);
EXEC RecordFileSize('NAME1');
SELECT * FROM TableStatus;
SELECT * FROM NAME1;
SELECT * FROM NAME2;
SELECT * FROM NAME3;

--去重
CREATE TABLE "#temp" AS (SELECT DISTINCT * FROM NAME1);   --创建临时表，并把DISTINCT 去重后的数据插入到临时表中
truncate TABLE NAME1;   --清空原表数据
INSERT INTO NAME1 (SELECT * FROM "#temp");   --将临时表数据插入到原表中
DROP TABLE "#temp";  
--去重
CREATE TABLE "#temp" AS (SELECT DISTINCT * FROM NAME2);
truncate TABLE NAME2;
INSERT INTO NAME2 (SELECT * FROM "#temp");
DROP TABLE "#temp";  
--去重
CREATE TABLE "#temp" AS (SELECT DISTINCT * FROM NAME3);
truncate TABLE NAME3;
INSERT INTO NAME3 (SELECT * FROM "#temp");
DROP TABLE "#temp";  

--创建姓名表
CREATE TABLE T_STUD_NAMES_J521(
    STUDNAME NVARCHAR2(10)
);
INSERT into T_STUD_NAMES_J521 values ('张三');
EXEC RecordFileSize('T_STUD_NAMES_J521');
SELECT * FROM TableStatus;

--DROP TABLE T_STUD_NAMES_J521;
--从先前的表中选取适当位置的字符生成名字
INSERT INTO T_STUD_NAMES_J521 (SELECT ONAME1||ONAME2||ONAME3 NAMES31 FROM NAME1,NAME2,NAME3 WHERE ROWNUM<=9000000);
INSERT INTO T_STUD_NAMES_J521 (SELECT ONAME1||ONAME3 NAMES21 FROM NAME1,NAME3 WHERE ROWNUM<=1500000);
INSERT INTO T_STUD_NAMES_J521 (SELECT ONAME1||ONAME2 NAMES22 FROM NAME1,NAME2 WHERE ROWNUM<=1500000);
EXEC RecordFileSize('T_STUD_NAMES_J521');
SELECT * FROM TableStatus;
--去重
CREATE TABLE "#temp" AS (SELECT DISTINCT * FROM T_STUD_NAMES_J521);
truncate TABLE T_STUD_NAMES_J521;
INSERT INTO T_STUD_NAMES_J521 (SELECT * FROM "#temp");
DROP TABLE "#temp";  
EXEC RecordFileSize('T_STUD_NAMES_J521');
SELECT * FROM TableStatus;

SELECT COUNT(*) FROM T_STUD_NAMES_J521;
SELECT * FROM T_STUD_NAMES_J521;

--创建表格生成学号，按照要求诸位生成并保存
CREATE TABLE T_STUD_SNOGH_J521(SNOGH number(10));
CREATE TABLE T_STUD_SNOEF_J521(SNOEF number(10));
CREATE TABLE T_STUD_SNOCD_J521(SNOCD number(10));
CREATE TABLE T_STUD_SNOAB_J521(SNOAB varchar2(10));

--创建过程生成学号，诸位生成并相加并最后保存至生成至AB的表格中
CREATE OR REPLACE PROCEDURE SNOCREATE
AS
TEMP INT;
BEGIN
    FOR TEMP IN 1..32 
        LOOP
            INSERT INTO T_STUD_SNOGH_J521 values(TEMP);
            COMMIT;
        END LOOP;
    FOR TEMP IN 1..50 
        LOOP
            INSERT INTO T_STUD_SNOEF_J521 SELECT 170000+TEMP*100+T_STUD_SNOGH_J521.SNOGH FROM T_STUD_SNOGH_J521;
            COMMIT;
        END LOOP;
    FOR TEMP IN 1..90
        LOOP
            INSERT INTO T_STUD_SNOCD_J521 SELECT TEMP*1000000+T_STUD_SNOEF_J521.SNOEF FROM T_STUD_SNOEF_J521;
            COMMIT;
        END LOOP;
    FOR TEMP IN 1..80
        LOOP
            INSERT INTO T_STUD_SNOAB_J521 SELECT substr(10000000000+TEMP*100000000+T_STUD_SNOCD_J521.SNOCD,2,10) FROM T_STUD_SNOCD_J521;
            COMMIT;
        END LOOP;
END;

EXEC SNOCREATE;

SELECT * FROM T_STUD_SNOAB_J521;

SELECT COUNT(*) FROM T_STUD_SNOAB_J521;

--随即生成性别，使用随机数并判断生成的随机数的范围确定性别的比例
CREATE OR REPLACE FUNCTION GENDERCREATE RETURN NVARCHAR2
IS
RANDOMCOUNT INT ;
TEMPGENDER NVARCHAR2(2);
BEGIN
    SELECT DBMS_RANDOM.VALUE(1,200) INTO RANDOMCOUNT FROM DUAL;
    IF (RANDOMCOUNT<=99) THEN
        TEMPGENDER:='男';
    ELSIF (RANDOMCOUNT<=199) THEN
        TEMPGENDER:='女';
    ELSE
        TEMPGENDER:='其他';
    END IF;
    RETURN TEMPGENDER;
END;
--SELECT GENDERCREATE FROM DUAL;

--创建函数随机生成11位的电话号码
CREATE OR REPLACE FUNCTION GENERATEPHONE RETURN VARCHAR2
IS
TEMPPHONE INT;
BEGIN
    SELECT DBMS_RANDOM.VALUE(10000000000,19999999999) INTO TEMPPHONE FROM DUAL;
    RETURN CAST(TEMPPHONE AS VARCHAR2);
END;
--SELECT GENERATEPHONE FROM DUAL;

--创建函数随机生成符合邮件格式规范的邮件地址
CREATE OR REPLACE FUNCTION GENERATEMAIL RETURN VARCHAR2
IS
TEMPMAILHEAD VARCHAR2(16);
TEMPMAILCOM VARCHAR2(6);
BEGIN
    SELECT DBMS_RANDOM.STRING('X',16) INTO TEMPMAILHEAD FROM DUAL;
    SELECT DBMS_RANDOM.STRING('X',6) INTO TEMPMAILCOM FROM DUAL;
    RETURN CONCAT(TEMPMAILHEAD,CONCAT('@',CONCAT(TEMPMAILCOM,'.com')));
END;
--SELECT GENERATEMAIL FROM DUAL;

--随机生成实验内要求的生日
CREATE OR REPLACE FUNCTION GENERATEBIRTH RETURN DATE
IS
BIRTHDAY DATE;
BEGIN
    SELECT TO_DATE(TRUNC(DBMS_RANDOM.VALUE(2449354,2451186)), 'J') INTO BIRTHDAY FROM DUAL;
    RETURN BIRTHDAY;
END;
--SELECT GENERATEBIRTH FROM DUAL;

--创建临时学生信息表
CREATE TABLE T_STUD_INFOR_J521(
    SEX NVARCHAR2(2),
    TEL VARCHAR2(11),
    MAIL VARCHAR2(40),
    BIRTHDAY DATE
);
INSERT INTO T_STUD_INFOR_J521 VALUES('男','17877781898','tom-goh@outlook.com','31-12月-99');
EXEC RecordFileSize('T_STUD_INFOR_J521');
SELECT * FROM TableStatus;
--DROP TABLE T_STUD_INFOR_J521;

--创建过程，生成一千万个学生对应的随机信息
CREATE OR REPLACE PROCEDURE INPUTINFOR 
AS
BEGIN
    FOR I IN 0..9999999 LOOP
    INSERT INTO T_STUD_INFOR_J521(SEX,TEL,MAIL,BIRTHDAY) VALUES(GENDERCREATE,GENERATEPHONE,GENERATEMAIL,GENERATEBIRTH);
    END LOOP;
END;

EXEC INPUTINFOR;
EXEC RecordFileSize('T_STUD_INFOR_J521');
SELECT * FROM TableStatus;
SELECT * FROM T_STUD_INFOR_J521;

--创建适用于该实验的学生表格，该表格无主键
CREATE TABLE T_STUDENT_EX3_J521(
    SNo VARCHAR2(10),
    SName NVARCHAR2(3),
    SEX NVARCHAR2(2),
    TEL VARCHAR2(11),
    MAIL VARCHAR2(30),
    BIRTHDAY DATE
);

INSERT INTO T_STUDENT_EX3_J521 VALUES('8208180521','吴昊泽','其他','17877781888','tomgoh@126.com','31-12月-99');
EXEC RecordFileSize('T_STUDENT_EX3_J521');
SELECT * FROM TableStatus;

EXEC RECORDTIME('无主键插入前时间戳');
INSERT INTO T_STUDENT_EX3_J521(SNO,SNAME,SEX,TEL,MAIL,BIRTHDAY)
SELECT X.SNOAB,A.STUDNAME,B.SEX,B.TEL,B.MAIL,B.BIRTHDAY
FROM
(SELECT ROWNUM ROWNUMX, SNOAB FROM T_STUD_SNOAB_J521) X,
(SELECT ROWNUM ROWNUMA,STUDNAME FROM T_STUD_NAMES_J521) A,
(SELECT ROWNUM ROWNUMB, SEX,TEL,MAIL,BIRTHDAY FROM T_STUD_INFOR_J521) B
WHERE ROWNUMA=ROWNUMB AND ROWNUMB = ROWNUMX;
EXEC RECORDTIME('无主键插入后时间戳');
EXEC RecordFileSize('T_STUDENT_EX3_J521');
SELECT * FROM TableStatus;

DROP TABLE T_STUDENT_EX3_J521;

--创建适用于该实验的学生表格，该表格使用学生序号作为主键
CREATE TABLE T_STUDENT_EX3_J521(
    SNo VARCHAR2(10) PRIMARY KEY,
    SName NVARCHAR2(3),
    SEX NVARCHAR2(2),
    TEL VARCHAR2(11),
    MAIL VARCHAR2(30),
    BIRTHDAY DATE
);
EXEC RECORDTIME('有主键插入前时间戳');
INSERT INTO T_STUDENT_EX3_J521(SNO,SNAME,SEX,TEL,MAIL,BIRTHDAY)
SELECT X.SNOAB,A.STUDNAME,B.SEX,B.TEL,B.MAIL,B.BIRTHDAY
FROM
(SELECT ROWNUM ROWNUMX, SNOAB FROM T_STUD_SNOAB_J521) X,
(SELECT ROWNUM ROWNUMA,STUDNAME FROM T_STUD_NAMES_J521) A,
(SELECT ROWNUM ROWNUMB, SEX,TEL,MAIL,BIRTHDAY FROM T_STUD_INFOR_J521) B
WHERE ROWNUMA=ROWNUMB AND ROWNUMB = ROWNUMX;
EXEC RECORDTIME('有主键插入后时间戳');
SELECT * FROM TIMERECORD;
SELECT * FROM T_STUDENT_EX3_J521;


EXEC RECORDTIME('未INDEX建立查询基姓前时间戳');
SELECT * FROM T_STUDENT_EX3_J521 WHERE SNAME LIKE '基%';
EXEC RECORDTIME('未INDEX建立查询基姓后时间戳');

EXEC RECORDTIME('未INDEX建立查询吴姓前时间戳');
SELECT * FROM T_STUDENT_EX3_J521 WHERE SNAME LIKE '吴%';
EXEC RECORDTIME('未INDEX建立查询吴姓后时间戳');

EXEC RECORDTIME('未INDEX建立查询张美前时间戳');
SELECT * FROM T_STUDENT_EX3_J521 WHERE SNAME LIKE '张美%';
EXEC RECORDTIME('未INDEX建立查询张美后时间戳');


EXEC RECORDTIME('INDEX建立前时间戳');
CREATE INDEX I_STUDENT_EX3_J521 ON T_STUDENT_EX3_J521(SName);
EXEC RECORDTIME('INDEX建立后时间戳');


EXEC RECORDTIME('已INDEX建立查询基姓前时间戳');
SELECT * FROM T_STUDENT_EX3_J521 WHERE SNAME LIKE '基%';
EXEC RECORDTIME('已INDEX建立查询基姓后时间戳');

EXEC RECORDTIME('已INDEX建立查询吴姓前时间戳');
SELECT * FROM T_STUDENT_EX3_J521 WHERE SNAME LIKE '吴%';
EXEC RECORDTIME('已INDEX建立查询吴姓后时间戳');
EXEC RECORDTIME('已INDEX建立查询张美姓前时间戳');
SELECT * FROM T_STUDENT_EX3_J521 WHERE SNAME LIKE '张美%';
EXEC RECORDTIME('已INDEX建立查询张美姓后时间戳');


SELECT * FROM DBA_DATA_FILES;
SELECT TABLESPACE_NAME, FILE_NAME, BYTES/1024/1024||'M' FROM DBA_DATA_FILES WHERE TABLESPACE_NAME='USERS';


EXEC RECORDTIME('建立分区前按照首位查询人数前时间戳');
SELECT * FROM T_STUDENT_EX3_J521 WHERE SNO LIKE '12%';
EXEC RECORDTIME('建立分区前按照首位查询人数后时间戳');

EXEC RECORDTIME('建立分区前按照EF查询人数前时间戳');
SELECT * FROM T_STUDENT_EX3_J521 WHERE SNO LIKE '______12%';
EXEC RECORDTIME('建立分区前按照EF位查询人数后时间戳');

DROP TABLE T_STUDENT_EX3_J521;

--创建学生表并且根据学号的大小创建分区
CREATE TABLE T_STUDENT_EX3_J521(
    SNo VARCHAR2(10) PRIMARY KEY,
    SName NVARCHAR2(3),
    SEX NVARCHAR2(2),
    TEL VARCHAR2(11),
    MAIL VARCHAR2(30),
    BIRTHDAY DATE
)PARTITION BY RANGE(SNo)(
    PARTITION P1 VALUES LESS THAN('1000000'),
    PARTITION P2 VALUES LESS THAN('2000000'),
    PARTITION P3 VALUES LESS THAN('3000000'),
    PARTITION P4 VALUES LESS THAN('4000000'),
    PARTITION P5 VALUES LESS THAN('5000000'),
    PARTITION P6 VALUES LESS THAN('6000000'),
    PARTITION P7 VALUES LESS THAN('7000000'),
    PARTITION P8 VALUES LESS THAN('8000000'),
    PARTITION P9 VALUES LESS THAN('9000000'),
    PARTITION P10 VALUES LESS THAN(MAXVALUE)
);

--select * from v$option;

INSERT INTO T_STUDENT_EX3_J521(SNO,SNAME,SEX,TEL,MAIL,BIRTHDAY)
SELECT X.SNOAB,A.STUDNAME,B.SEX,B.TEL,B.MAIL,B.BIRTHDAY
FROM
(SELECT ROWNUM ROWNUMX, SNOAB FROM T_STUD_SNOAB_J521) X,
(SELECT ROWNUM ROWNUMA,STUDNAME FROM T_STUD_NAMES_J521) A,
(SELECT ROWNUM ROWNUMB, SEX,TEL,MAIL,BIRTHDAY FROM T_STUD_INFOR_J521) B
WHERE ROWNUMA=ROWNUMB AND ROWNUMB = ROWNUMX;

EXEC RECORDTIME('建立分区后按照首位查询人数前时间戳');
SELECT * FROM T_STUDENT_EX3_J521 WHERE SNO LIKE '12%';
EXEC RECORDTIME('建立分区后按照首位查询人数后时间戳');

EXEC RECORDTIME('建立分区后按照EF查询人数前时间戳');
SELECT * FROM T_STUDENT_EX3_J521 WHERE SNO LIKE '______12%';
EXEC RECORDTIME('建立分区后按照EF位查询人数后时间戳');

